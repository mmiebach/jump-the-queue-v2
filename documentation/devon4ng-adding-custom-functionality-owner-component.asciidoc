:toc: macro
toc::[]
:idprefix:
:idseparator: -
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]


= adding custom functionality: Owner-Overview-Page-Component

First, we are going to generate the owner-overview-page component. We are going to run the following command in `angular\src\app`:

----
ng generate component owner-overview-page
----

We will first adapt the `app-routing.module.ts` to be able to reach the newly created component:

[source, typescript]
----
...

import { OwnerOverviewPageComponent } from '../app/owner-overview-page/owner-overview-page.component';

...

{ path: 'owner', component: OwnerOverviewPageComponent },

...
----

When clicking on the Login-button now you should see the default owner-page (make sure the backend is running as well!). It should look like this:

image::images/devon4ng/custom-owner/owner-overview-default-page.png[Default Owner Page, 600] 

Now we want to adapt the Owner-Overview-Page and implement some functionality. In `owner-overview-page.component.ts` we will import the Login-Page component and some other dependencies we will need for later use. It should look like this:

[source, typescript]
----
import { Component, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { LoginService } from '../login-page/services/login.service';

@Component({
  selector: 'app-owner-overview-page',
  templateUrl: './owner-overview-page.component.html',
  styleUrls: ['./owner-overview-page.component.scss']
})

export class OwnerOverviewPageComponent implements OnInit {
  private queueSub: Subscription;
  private codeSub: Subscription;

  constructor(
    private loginService: LoginService
  ) { }

  ngOnInit() {
  }


}

----

We will now use the Login component to add a logout button. In `owner-overview-page.component.ts` ad the following logout method:

[source, typescript]
----
  onLogout() {
    this.loginService.logout();
  }
----

This Method will use the logout function, that we already defined in the Login-Page. 

Now we will add some style to the `owner-overview-page`.To the `owner-overview-page.component.scss` add 

[source, typescript]
----
.owner-overview-page-container {
    height: 100%;
    display: flex;
    flex-direction: column;
    .queueLogoContainer {
        display: flex;
        justify-content: space-between;
    }
    .current-code-label {
        color: #FFF;
    }
}
----

Now we can add the needed Button to Logout. The `owner-overview-page.html` should contain:

[source, html]
----
<div class="owner-overview-page-container">
  <div class="queueLogoContainer">
      <button class="logout-button" mat-button (click)="onLogout()">Log out</button>
  </div>
</div>
----




We will now add an `auth-guard` service, that will redirect a user to the login-page, when not logged in. In `app/core` create two files: `auth-guard.service.spec.ts` and `auth-guard.service.ts`.

In the `auth-guard.service.spec.ts` copy and paste the following code:

[source, typescript]
----
import { TestBed } from '@angular/core/testing';

import { AuthGuardService } from './auth-guard.service';

describe('AuthGuardService', () => {
  beforeEach(() => TestBed.configureTestingModule({}));

  it('should be created', () => {
    const service: AuthGuardService = TestBed.get(AuthGuardService);
    expect(service).toBeTruthy();
  });
});
----

and in the `auth-guard.service.ts` we will implement a method, that checks wether a given user is logged and redirects to the login page. It should look like this:

[source, typescript]
----
import { Injectable } from '@angular/core';
import {
  CanActivate,
  Router,
  ActivatedRouteSnapshot,
  RouterStateSnapshot,
} from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuardService implements CanActivate {

  constructor(
    private authService: AuthService,
    private router: Router
  ) { }

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot,
  ): boolean {
    if (this.authService.isLogged()) {
      return true;
    } else {
      this.router.navigate(['login']);
    }
  }
}
----

Now we will add the AuthGuardService to the Routing-Module. In the `app-routing.module.ts` import the AuthGuardService and add it to the routing of the Owner:

[source, typescript]
----
...
import { AuthGuardService } from './core/auth-guard.service';
...
{ path: 'owner', component: OwnerOverviewPageComponent, canActivate: [AuthGuardService] },
...
----


Now we are going to add some services to access the backend. Create a folder in `app/shared` called `services`.

First we are going to create a service that will access the accesscode. In `app/shared/services` add the files `access-code.service.ts` and `access-code.service.spec.ts`.

In `access-code.service.spec.ts` copy and paste the following code:

[source, typescript]
----
import { TestBed } from '@angular/core/testing';

import { AccessCodeService } from './access-code.service';

describe('AccessCodeService', () => {
  beforeEach(() => TestBed.configureTestingModule({}));

  it('should be created', () => {
    const service: AccessCodeService = TestBed.get(AccessCodeService);
    expect(service).toBeTruthy();
  });
});

----

In `access-code.service.ts` add the following code:

[source, typescript]
----
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { AccessCode, EstimatedTime, NextCodeCto, RemainingCodes } from './../backendModels/interfaces';

@Injectable({
  providedIn: 'root'
})
export class AccessCodeService {

  private baseUrl = environment.baseUrlRestServices;

  constructor(private http: HttpClient) { }

  getCurrentCode(): Observable<AccessCode> {
    return this.http.post<AccessCode>(this.baseUrl + 'accesscodemanagement/v1/accesscode/current', {});
  }

  callNextCode(): Observable<NextCodeCto> {
    return this.http.post<NextCodeCto>(this.baseUrl + 'accesscodemanagement/v1/accesscode/next', {});
  }

  getCodeByUuid(uuid: {'uuid': string}): Observable<AccessCode> {
    return this.http.post<AccessCode>(this.baseUrl + 'accesscodemanagement/v1/accesscode/uuid', uuid);
  }

  getEstimatedTimeByCode(code: AccessCode): Observable<EstimatedTime> {
    return this.http.post<EstimatedTime>(this.baseUrl + 'accesscodemanagement/v1/accesscode/estimated', code);
  }

  getRemainingCodesCount(): Observable<RemainingCodes> {
    return this.http.post<RemainingCodes>(this.baseUrl + 'accesscodemanagement/v1/accesscode/remaining', {});
  }
}
----


We imported the classes AccessCode, EstimatedTime, NextCodeCto and RemainingCodes. Therefore we need to add them to the Frontend. Also we will add the `CodeUuid` -class for later use.  In `app/shared/backendModels/interfaces.ts` add:

[source,typescript]
----
export class AccessCode {
    id: number;
    modificationCounter: number;
    code: string;
    uuid: string;
    createdDate: number;
    startTime?: number;
    endTime?: number;
    status: Status;
    queueId: number;
}

export class EstimatedTime {
    miliseconds: number;
    defaultTimeByUserInMs: number;
}

export class RemainingCodes {
    remainingCodes: number;
}

export class NextCodeCto {
    accessCode: AccessCode;
    remainingCodes: RemainingCodes;
}

export class CodeUuid {
    uuid: string;
}


----

We will obtain an error regarding Status. We therefore need to add Status as well. In `app/shared/backendModels` create a file called `enums.ts` and add the following code to it:

[source,typescript]
----
export enum Status {
    Waiting = 'WAITING',
    Attending = 'ATTENDING',
    Attended = 'ATTENDED',
    Skipped = 'SKIPPED',
    NotStarted = 'NOTSTARTED'
}

export enum Direction {
    ASC = 'ASC',
    DESC = 'DESC'
}
----

In `interfaces.ts` we can now add the Status:


[source,typescript]
----
import { Direction, Status} from './enums';
----

Now we are going to add a service that will retrieve the queue information of the backend.

In `app/shared/services` add two files called `queue.service.spec.ts` and `queue.service.ts`:

In the `queue.service.spec.ts` copy and paste the following code:

[source, typescript]
----
import { TestBed } from '@angular/core/testing';

import { QueueService } from './queue.service';

describe('QueueService', () => {
  beforeEach(() => TestBed.configureTestingModule({}));

  it('should be created', () => {
    const service: QueueService = TestBed.get(QueueService);
    expect(service).toBeTruthy();
  });
});
----

In the `queue.service.ts` add:

[source, typescript]
----
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { Queue } from './../backendModels/interfaces';
import { Observable } from 'rxjs';



@Injectable({
  providedIn: 'root'
})
export class QueueService {

  private baseUrl = environment.baseUrlRestServices;

  constructor(private http: HttpClient) {}

  getTodaysQueue(): Observable<Queue> {
    return this.http.get<Queue>(this.baseUrl + 'queuemanagement/v1/queue/daily/');
  }

  startQueue(queue: Queue): Observable<Queue> {
    return this.http.post<Queue>(this.baseUrl + 'queuemanagement/v1/queue/start', queue);
  }
}

----

We now need to add the class `Queue` to `app/shared/backendModels/interfaces.ts`:

[source, typescript]
----
export class Queue {
    id: number;
    modificationCounter: number;
    minAttentionTime: number;
    started: boolean;
    createdDate: number;
}
----

We will now add a new component `qr-overview-page` with `ng generate component qr-overview-page`.

In `qr-overview-page.component.ts` there should be

[source, typescript]
----
import { Component, OnInit } from '@angular/core';
import { environment } from 'src/environments/environment';

@Component({
  selector: 'app-qr-overview-page',
  templateUrl: './qr-overview-page.component.html',
  styleUrls: ['./qr-overview-page.component.scss']
})
export class QrOverviewPageComponent implements OnInit {
  private myAngularxQrCode: string;
  private host: string;
  private hostname: string;
  private origin: string;
  constructor() {
    this.myAngularxQrCode = environment.qrUrl;
    this.host = window.location.host;
    this.hostname = window.location.hostname;
    this.origin = window.location.origin;
  }

  ngOnInit() {
  }

}

----

In `qr-overview-page.component.html` there should be

[source, html]
----
<div class="qr-overview-page-container">
    <qrcode [qrdata]="myAngularxQrCode" [size]="256" [level]="'M'"></qrcode>
</div>
----

In `qr-overview-page.component.scss` there should be
[source, scss]
----
.qr-overview-page-container {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
----





We will now add a new component `visitor-overview-page`. Stop `ng-serve` and in `src/app` run `ng generate component visitor-overview-page` 

We will need a service, that can manipulate the Uuid. We therefore create a new service. In `app/visitor-overview-page` create a new folder `shared`.
In that folder we will add two files `local-storage.service.ts` and `local-storage.service.spec.ts`.

In `local-storage.service.ts` add :

[source, typescript]
----
import { Injectable } from '@angular/core';
import * as uuid from 'uuid';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class LocalStorageService {
  private storageKey = environment.localStorageUuidKey;

  constructor() { }

  setUuid() {
    localStorage.setItem(this.storageKey, uuid.v4());
  }

  getUuid(): string {
    let value = localStorage.getItem(this.storageKey);
    if (!value) {
      this.setUuid();
      value = localStorage.getItem(this.storageKey);
    }
    return value;
  }

  renewUuid(): string {
    localStorage.removeItem(this.storageKey);
    return this.getUuid();
  }
}
----

In `local-storage.service.spec.ts` add:

[source, typescript]
----
import { TestBed } from '@angular/core/testing';

import { LocalStorageService } from './local-storage.service';

describe('LocalStorageService', () => {
  beforeEach(() => TestBed.configureTestingModule({}));

  it('should be created', () => {
    const service: LocalStorageService = TestBed.get(LocalStorageService);
    expect(service).toBeTruthy();
  });
});
----




Finally we are going to add a server related service. In `app/shared/services` add `server-side-events.service.ts` and `server-side-events.service.spec.ts` containing the following:

In `server-side-events.service.ts` we will need:

[source, typescript]
----

import { Injectable } from '@angular/core';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ServerSideEventsService {

  private streamUrl = environment.streamUrl;
  constructor() { }

  getStream(): EventSource {
    return new EventSource(this.streamUrl);
  }
}

----
 In `server-side-events.service.spec.ts`:

[source, java]
----
import { TestBed } from '@angular/core/testing';

import { ServerSideEventsService } from './server-side-events.service';

describe('ServerSideEventsService', () => {
  beforeEach(() => TestBed.configureTestingModule({}));

  it('should be created', () => {
    const service: ServerSideEventsService = TestBed.get(ServerSideEventsService);
    expect(service).toBeTruthy();
  });
});

----


